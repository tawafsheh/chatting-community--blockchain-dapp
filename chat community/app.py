#!/usr/bin/python3
import json
from web3 import Web3
from web3.exceptions import ContractLogicError
from solcx import compile_standard, install_solc
from flask import Flask, render_template, request,session, redirect
from dotenv import load_dotenv
from web3.middleware import geth_poa_middleware
from datetime import datetime
import argparse

bytecode = ""

abi = [{'inputs': [{'internalType': 'uint256', 'name': '_PostId', 'type': 'uint256'}], 'name': 'GetCommentsOnPost', 'outputs': [{'components': [{'internalType': 'uint256', 'name': 'postId', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'commentId', 'type': 'uint256'}, {'internalType': 'string', 'name': 'username', 'type': 'string'}, {'internalType': 'address', 'name': 'author', 'type': 'address'}, {'internalType': 'string', 'name': 'content', 'type': 'string'}, {'internalType': 'uint256', 'name': 'timestamp', 'type': 'uint256'}], 'internalType': 'struct CommunityDapp.Comment[]', 'name': '', 'type': 'tuple[]'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'uint256', 'name': '_PostId', 'type': 'uint256'}], 'name': 'GetLikesOnPost', 'outputs': [{'components': [{'internalType': 'uint256', 'name': 'postId', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'likeId', 'type': 'uint256'}, {'internalType': 'string', 'name': 'username', 'type': 'string'}, {'internalType': 'uint256', 'name': 'timestamp', 'type': 'uint256'}], 'internalType': 'struct CommunityDapp.Like[]', 'name': '', 'type': 'tuple[]'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'uint256', 'name': '_postId', 'type': 'uint256'}, {'internalType': 'string', 'name': '_comment', 'type': 'string'}], 'name': 'comment', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, {'inputs': [], 'name': 'getPosts', 'outputs': [{'components': [{'internalType': 'uint256', 'name': 'id', 'type': 'uint256'}, {'internalType': 'address', 'name': 'author', 'type': 'address'}, {'internalType': 'string', 'name': 'content', 'type': 'string'}, {'internalType': 'uint256', 'name': 'timestamp', 'type': 'uint256'}], 'internalType': 'struct CommunityDapp.Post[]', 'name': '', 'type': 'tuple[]'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': 'userAddress', 'type': 'address'}], 'name': 'getUser', 'outputs': [{'components': [{'internalType': 'string', 'name': 'name', 'type': 'string'}, {'internalType': 'uint256', 'name': 'joinedTimestamp', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'registered', 'type': 'bool'}], 'internalType': 'struct CommunityDapp.User', 'name': '', 'type': 'tuple'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [], 'name': 'getUsersWithPosts', 'outputs': [{'components': [{'internalType': 'address', 'name': 'userAddress', 'type': 'address'}, {'internalType': 'string', 'name': 'username', 'type': 'string'}, {'components': [{'internalType': 'uint256', 'name': 'id', 'type': 'uint256'}, {'internalType': 'address', 'name': 'author', 'type': 'address'}, {'internalType': 'string', 'name': 'content', 'type': 'string'}, {'internalType': 'uint256', 'name': 'timestamp', 'type': 'uint256'}], 'internalType': 'struct CommunityDapp.Post[]', 'name': 'posts', 'type': 'tuple[]'}, {'internalType': 'uint256', 'name': 'postCount', 'type': 'uint256'}], 'internalType': 'struct CommunityDapp.UserWithPosts[]', 'name': '', 'type': 'tuple[]'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'uint256', 'name': '_postId', 'type': 'uint256'}], 'name': 'like', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, {'inputs': [{'internalType': 'string', 'name': 'content', 'type': 'string'}], 'name': 'post', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, {'inputs': [{'internalType': 'string', 'name': 'name', 'type': 'string'}], 'name': 'register', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}]

parser = argparse.ArgumentParser(description='chat community app over spolia test network  needs: ')
parser.add_argument('-pub', dest='public_key', required=True, help='Public key argument')
parser.add_argument('-priv', dest='private_key', required=True, help='Private key argument')

args = parser.parse_args()

my_address = args.public_key
private_key = args.private_key

infura_endpoint = 'https://sepolia.infura.io/v3/974a593428c24f91bc674fc5a7b599c5'  # infura API spolia test net 
w3 = Web3(Web3.HTTPProvider(infura_endpoint))
# w3 = Web3(Web3.HTTPProvider("http://127.0.0.1:7545"))
chain_id = 11155111
print ("my_address : " , my_address)
print("private_key : ", private_key)
##################### 0xa547d4184A31600A75701970f5094C071b49EF9c #####################smart contract address


def register(interactive_functions,username , chain_id , my_address ):
    try: 
        global w3 ,private_key
        nonce = w3.eth.get_transaction_count(my_address)
        register_on_blockchain = interactive_functions.functions.register(username).build_transaction(
        {
            "chainId": chain_id,
            "gasPrice": w3.eth.gas_price,
            "from": my_address,
            "nonce": nonce ,
        }
        )
        signed_greeting_txn = w3.eth.account.sign_transaction(
        register_on_blockchain, private_key=private_key
        )
        tx_greeting_hash = w3.eth.send_raw_transaction(signed_greeting_txn.rawTransaction)
        return "Registered successfully ! "
    except  ContractLogicError: 
        return "User already registered or username is already exsists ! "

def post(interactive_functions,what_to_send , chain_id , my_address ):
    try: 
        global w3 , private_key
        nonce = w3.eth.get_transaction_count(my_address)
        register_on_blockchain = interactive_functions.functions.post(what_to_send).build_transaction(
        {
            "chainId": chain_id,
            "gasPrice": w3.eth.gas_price,
            "from": my_address,
            "nonce": nonce ,
        }
        )
        signed_greeting_txn = w3.eth.account.sign_transaction(
        register_on_blockchain, private_key=private_key
        )
        tx_greeting_hash = w3.eth.send_raw_transaction(signed_greeting_txn.rawTransaction)
        return " post successfully ! "
    except  ContractLogicError: 
        return "something happend ! "   

def Comment(interactive_functions,postId , what_to_send, my_address, chain_id ): 
    try: 
        global w3 , private_key
        nonce = w3.eth.get_transaction_count(my_address)
        register_on_blockchain = interactive_functions.functions.comment(postId, what_to_send).build_transaction(
        {
            "chainId": chain_id,
            "gasPrice": w3.eth.gas_price,
            "from": my_address,
            "nonce": nonce ,
        }
        )
        signed_txn = w3.eth.account.sign_transaction(
        register_on_blockchain, private_key=private_key
        )
        tx_greeting_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)
        return " Comment successfully ! "
    except  ContractLogicError: 
        return "something happend ! "   

def Like(interactive_functions,postId , my_address, chain_id):
    try: 
        global w3 , private_key
        nonce = w3.eth.get_transaction_count(my_address)
        register_on_blockchain = interactive_functions.functions.like(postId).build_transaction(
        {
            "chainId": chain_id,
            "gasPrice": w3.eth.gas_price,
            "from": my_address,
            "nonce": nonce ,
        }
        )
        signed_txn = w3.eth.account.sign_transaction(
        register_on_blockchain, private_key=private_key
        )
        tx_greeting_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)
        return " Like successfully ! "
    except  ContractLogicError: 
        return "something happend ! "   

def getUser(interactive_functions, my_address): 
    return interactive_functions.functions.getUser(my_address).call()

def getComments(interactive_functions , postId ): 
    Comments_before_filter = interactive_functions.functions.GetCommentsOnPost(postId).call()
    Comments_after_filter = [] 
    for i in Comments_before_filter:
        Comments_after_filter.append({"username": i[2] , "comment": i[4], "timestamp": return_readable_timestamp(i[5])} )
    return Comments_after_filter

def getLikes(interactive_functions , postId ): 
    return interactive_functions.functions.GetLikesOnPost(postId).call()


def return_readable_timestamp(timestamp): 
    return str(datetime.fromtimestamp(timestamp))

def get_all_post(interactive_functions):
    filtt = interactive_functions.functions.getUsersWithPosts().call()
    posts = [] 

    for i in filtt: 
        username = i[1]
        temp_posts = [] 
        temp_timestamp = [] 
        temp_postId = [] 
        temp_comments = [] 
        temp_likes_count  = [] 
        if (len(i[2])>0 ): 
            for  post in i[2]: 
                if(len(post[2]) > 0):
                    temp_postId.append(post[0])
                    temp_comments.append(getComments(interactive_functions, post[0] ))
                    temp_posts.append(post[2])
                    temp_timestamp.append(return_readable_timestamp( int(post[3])))
                    temp_likes_count.append(len(getLikes(interactive_functions,post[0])))
        #print("likes count :  ", len(temp_likes))
        if len(username) > 0:
            posts.append({"username": username ,"postIds": temp_postId, "posts":temp_posts, "timestamps":temp_timestamp , "Comments": temp_comments , "LikesCount": temp_likes_count}) 

    return posts

######################################### server code ####################################################

app = Flask(__name__)
app.config["SESSION_PERMANENT"] = True

CommunityChat_interactive_functions = w3.eth.contract(address='0xa547d4184A31600A75701970f5094C071b49EF9c', abi=abi)# tx_receipt.contractAddress
username= '' 
@app.route("/")
def home():
    global CommunityChat_interactive_functions , username , my_address
    user_tuple= getUser(CommunityChat_interactive_functions , my_address)
    userSigned_Check = user_tuple[2]
    username = user_tuple[0]
    if (userSigned_Check): 
        date_sign_up = return_readable_timestamp(int(user_tuple[1]))
        return render_template("index.html", userSigned_Check =userSigned_Check , username=username , date_sign_up=date_sign_up )
    else: 
        return render_template("index.html", userSigned_Check =userSigned_Check,  username=username)

@app.route('/register', methods=['POST'])
def reg():
    global username
    if request.method == 'POST':
        username = request.form.get('name')
        register(CommunityChat_interactive_functions, username, chain_id, my_address)


        print(f"registered successfully as {username}")
        return redirect("/post") 
    else: 
        return 'registered done!!'

@app.route("/Comment" , methods=['POST'])
def create_comment(): 
    if request.method == 'POST':
        postId = request.form.get("post_id")
        content_of_comment = request.form.get("comment_content")

        print(Comment(CommunityChat_interactive_functions, int(postId), content_of_comment, my_address, chain_id))
        return redirect('/post')

@app.route("/Like" , methods=['POST'])
def Like_post(): 
    if request.method == 'POST':
        postId = request.form.get("post_id")
        print(Like(CommunityChat_interactive_functions, int(postId), my_address, chain_id))
        return redirect('/post')


@app.route("/LikesForPost", methods= ['POST'])
def LikesForPost(): 
    if request.method == 'POST':
        postId = request.form.get("post_id")
        Likes_Tuple = getLikes(CommunityChat_interactive_functions, int(postId))
        Likes= [] 
        for i in Likes_Tuple: 
            Likes.append({"username": i[2], "timestamp": return_readable_timestamp(i[3])})
        return render_template("Likes.html", len1=len(Likes) , Likes=Likes)

@app.route('/post', methods=['GET', 'POST'])
def create_post():
    global username, CommunityChat_interactive_functions
    if request.method == 'POST':
        what_to_send = request.form.get('post_content')

        post(CommunityChat_interactive_functions, what_to_send, chain_id, my_address)
        messages = get_all_post(CommunityChat_interactive_functions)
        return render_template('chat.html', username=username, messages=messages)
    else:
        user_tuple = getUser(CommunityChat_interactive_functions, my_address)
        userSigned_Check = user_tuple[2]
        if not userSigned_Check:  # User is not registered
            return redirect(url_for('home'))
        else:
            messages = get_all_post(CommunityChat_interactive_functions)
            return render_template('chat.html', username=username, messages=messages)

if __name__ == "__main__":
    app.run(debug=True)        